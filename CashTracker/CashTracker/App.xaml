<?xml version="1.0" encoding="utf-8" ?>
<Application xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:controls="clr-namespace:CashTracker.Controls"
             x:Class="CashTracker.App">
    <Application.Resources>
        <!--Global Color Theming-->
        <ResourceDictionary Source="Styles/TrippyTheme.xaml" />

        <!--Global Control Theming-->
        <Style TargetType="ContentPage" ApplyToDerivedTypes="True">
            <Setter Property="BackgroundColor" Value="{DynamicResource PageBackgroundColor}"/>
        </Style>
        <Style TargetType="Entry">
            <Setter Property="PlaceholderColor" Value="{DynamicResource SecondaryTextColor}"/>
            <Setter Property="TextColor" Value="{DynamicResource PrimaryTextColor}"/>
            <Setter Property="HorizontalTextAlignment" Value="Center"/>
        </Style>

        <Style TargetType="ActivityIndicator">
            <Setter Property="Color" Value="{DynamicResource SecondaryColor}"/>
        </Style>

        <!--For some reason, using applyToDerivedTypes on the Entry above, doesn't pass styles onto FancyEntry-->
        <Style TargetType="controls:FancyEntry">
            <Setter Property="BorderColor" Value="{DynamicResource SecondaryColor}"/>
            <Setter Property="TextColor" Value="{DynamicResource PrimaryTextColor}"/>
            <Setter Property="PlaceholderColor" Value="{DynamicResource SecondaryTextColor}"/>
            <Setter Property="HorizontalTextAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="8"/>
        </Style>

        <Style TargetType="DatePicker">
            <Setter Property="BackgroundColor" Value="{DynamicResource PrimaryColor}"/>
            <Setter Property="TextColor" Value="{DynamicResource PrimaryTextColor}"/>
        </Style>

        <Style TargetType="Label">
            <Setter Property="TextColor" Value="{DynamicResource PrimaryTextColor}"/>
        </Style>

        <!--Below we are using the VisualStateManager to set styles for different control states. i.e Normal vs. Selected-->
        <!--This is Microsoft's recommended approach for styling CollectionView items: 
            https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/collectionview/selection#change-selected-item-color-->
        <Style TargetType="Frame">
            <Setter Property="VisualStateManager.VisualStateGroups">
                <VisualStateGroupList>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{DynamicResource PrimaryColor}"/>
                                <Setter Property="BorderColor" Value="{DynamicResource SecondaryColor}"/>
                                <Setter Property="CornerRadius" Value="5"/>
                                <Setter Property="Padding" Value="5"/>
                                <Setter Property="HasShadow" Value="True"/>
                            </VisualState.Setters>
                        </VisualState>
                        <!--Swap colors when selected-->
                        <VisualState x:Name="Selected">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{DynamicResource SecondaryColor}"/>
                                <Setter Property="BorderColor" Value="{DynamicResource SecondaryColor}"/>
                                <Setter Property="CornerRadius" Value="5"/>
                                <Setter Property="Padding" Value="5"/>
                                <Setter Property="HasShadow" Value="True"/>
                            </VisualState.Setters>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateGroupList>
            </Setter>
        </Style>

        <Style TargetType="Button">
            <Setter Property="VisualStateManager.VisualStateGroups">
                <VisualStateGroupList>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{DynamicResource SecondaryColor}"/>
                                <Setter Property="TextColor" Value="{DynamicResource ButtonTextColor}"/>
                            </VisualState.Setters>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor" Value="{DynamicResource PrimaryDisabledColor}" />
                                <Setter Property="TextColor" Value="{DynamicResource DisabledTextColor}"/>
                                <Setter Property="Opacity" Value="0.5"/>
                            </VisualState.Setters>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateGroupList>
            </Setter>
        </Style>

    </Application.Resources>
</Application>
